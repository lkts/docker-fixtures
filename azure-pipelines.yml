# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core
pool:
  vmImage: 'Ubuntu 16.04'

variables:
  buildConfiguration: 'Release'
  sln: '$(Build.SourcesDirectory)/docker-fixtures.sln'
  tests: '$(Build.SourcesDirectory)/src/Tests/DockerFixtures.Tests/DockerFixtures.Tests.csproj'
  artifacts: '$(Build.SourcesDirectory)/artifacts'
  coverageResults: '$(artifacts)/coverage/'
  coverageSummary: '$(artifacts)/coverage/summary.xml'

steps:
- script: dotnet build --configuration $(buildConfiguration) $(sln)
  displayName: 'dotnet build $(buildConfiguration)'
- script: dotnet test $(tests) --logger "xunit;LogFileName=TestResults.xml" /p:CollectCoverage=true /p:CoverletOutput=$(coverageResults) /p:CoverletOutputFormat='cobertura%2cjson' /p:MergeWith=$(coverageSummary)
  displayName: 'dotnet test'
- task: PublishTestResults@2
  displayName: 'Publish test results'
  inputs:
    testResultsFormat: 'xUnit'
    testResultsFiles: '**/TestResults.xml'
  condition: always()
- script: |
    dotnet tool install dotnet-reportgenerator-globaltool --version 4.0.3 --tool-path .tools
    ls -la $(coverageResults)
    cat $(coverageSummary)
    ./.tools/reportgenerator "-reports:$(coverageSummary)" "-targetdir:$(coverageResults)" "-reporttypes:HTMLInline;HTMLChart"
  displayName: Generate code coverage report
- task: PublishCodeCoverageResults@1
  displayName: Publish code coverage report
  enabled: true
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(coverageSummary)'
    reportDirectory: '$(coverageResults)'
    additionalCodeCoverageFiles: '$(coverageResults)/index.html'